(load "Lab3.lisp")

(defun welcomeUser()
  (print "Welcome to DB CLI. Read/Write from/to file is made automatically")
  (print "Please do not close the app unexpectedly")
  (print "Please enter all values in double quotes unless asked otherwise")
  (print "Your options are:")
  (print "> wipeDB - clear in-memory DB")
  (print "> wipeDBFile - clear the DB file")
  (print "> printDB - show DB contents")
  (print "> createTable - create a new table")
  (print "> printTable - print the table's contents")
  (print "> dropTable - delete table")
  (print "> truncateTable - delete all entries from table")
  (print "> insertIntoTable - insert new entry into table")
  (print "> selectFromTable - search the table")
  (print "> deleteFromTable - delete table entry")
  (print "> alterTable - alter table entry")
  (print "> sortTable - sort the contents of the table")
  (print "> exit - quits the DB")
  (terpri)
  (finish-output)
)

(defun getUserInput(explanationStr)
  (print explanationStr)
  (terpri)
  (finish-output)
  (read)
)

(defun cli (option)
  (print option)
  (cond
    ((equal option "wipeDB") (wipeDB base))
    ((equal option "wipeDBFile") (wipeDBFile "db.txt"))
    ((equal option "printDB") (printDB base))
    ((equal option "createTable") (createTable base (getUserInput "Name the new table: ") (getUserInput "Provide the list of column names (in parenthesis, space-separated, each entry in double quotes): ") ) (cli (read)))
    ((equal option "printTable") (printTable base (getUserInput "Table to be printed: ")) (cli (read)))
    ((equal option "dropTable") (dropTable base (getUserInput "Table to be dropped: ")) (cli (read)))
    ((equal option "truncateTable") (truncateTable base (getUserInput "Table to be truncated: ")) (cli (read)))
    ((equal option "insertIntoTable") (insertIntoTable base (getUserInput "Table to insert into: ") (getUserInput "Provide the list of values to insert (in parenthesis, space-separated, each entry in double quotes): ")) (cli (read)))
    ((equal option "selectFromTable") (print (selectFromTable base (getUserInput "Table to select from: ") (getUserInput "Column to search in: ") (getUserInput "Value to search for: "))) (terpri) (finish-output) (cli (read)))
    ((equal option "deleteFromTable") (deleteFromTable base (getUserInput "Table to delete from: ") (getUserInput "Column to search in: ") (getUserInput "Value to delete by: ")) (cli (read)))
    ((equal option "alterTable") (alterTable base (getUserInput "Table to alter in: ") (getUserInput "Column to search in: ") (getUserInput "Value to search for: ") (write-to-string(getUserInput "Value to replace with: "))) (cli (read)))
    ((equal option "sortTable") (sortTable base (getUserInput "Table to sort: ") (getUserInput "Column to sort by: ")) (print "Sorted!") (terpri) (finish-output) (cli (read)))
    ((equal option "exit") (writeDBFile base "db.txt") (print "Shutting down..."))
    (t (print "Invalid option specified") (welcomeUser) (cli (read)))
  )
)



(readDBFile base "db.txt")
(welcomeUser)
; (print (write-to-string 'test))
(cli (read))

; (writeDBFile base "db.txt")
